#! /usr/bin/env bash

#------------------#
# Section: General #
#------------------#

# Label: Tab to Space
# Description: Convert file from tab to space indendation.
# Parameters: $1 (required) - The file to convert, $2 (optional) - The number of spaces, default: 2.
t2s() {
  if [[ "$2" ]]; then
    local number_of_spaces=$2
  else
    local number_of_spaces=2
  fi

  if [[ "$1" ]]; then
    local temp_file=$(mktemp -t tabs_to_spaces) || { printf "\nERROR: Unable to create temporary file.\n"; return; }
    expand -t $number_of_spaces "$1" > $temp_file
    cat $temp_file > "$1"
    printf "Converted: $1.\n"
    rm -f $temp_file;
  else
    printf "ERROR: File must be supplied.\n"
    return 1
  fi
}

# Label: Colorized Type
# Description: Identical to "type" command functionality but with syntax highlighting.
# Parameters: $1 (required) - The alias or function to inspect source code for.
cype() {
  local name="$1"

  if [[ -z "$name" ]]; then
    printf "ERROR: Alias or function must be supplied.\n"
    return 1
  fi

  type "$1" | cat
}

# Label: Process Status (specialized)
# Description: Display process status (excluding current process) and ignoring case.
# Parameters: $1 (required) - The process name.
pss() {
  ps axu | ag --invert-match ag | ag "$1" --ignore-case
}

# Label: Kill Process
# Description: Kill errant processes.
# Parameters: $1 (required) - The search query, $2 (optional) - The kill signal. Default: 15.
kilp() {
  local query="$1"
  local signal=${2:-15}

  if [[ -z "$query" ]]; then
    printf "ERROR: Search query must be supplied.\n"
    return 1
  fi

  ps axu | ag --invert-match ag | ag "$query" | awk '{print $2}' | xargs kill -$signal
}

#-----------------------------------------------------------#
# Section: [less](http://en.wikipedia.org/wiki/Less_(Unix)) #
#-----------------------------------------------------------#

# Label: Less Interactive
# Description: Inspect file, interactively.
# Parameters: $1 (required) - The file path.
lessi() {
  if [[ "$1" ]]; then
    less +F --LONG-PROMPT --LINE-NUMBERS --RAW-CONTROL-CHARS --QUIET --quit-if-one-screen -i "$1"
  else
    printf "ERROR: File path must be supplied.\n"
    printf "TIP: Use CONTROL+c to switch to VI mode, SHIFT+f to switch back, and CONTROL+c+q to exit.\n"
  fi
}

#---------------------------------------------------------------------#
# Section: [License Finder](https://github.com/pivotal/LicenseFinder) #
#---------------------------------------------------------------------#

# Label: License Finder (include)
# Description: Include license in global list.
# Parameters: $1 (required) - License, $2 (required) - Why.
licensei() {
  local license="$1"
  local why="$2"

  if [[ -z "$license" ]]; then
    printf "%s\n" "ERROR: Must supply license."
    return 1
  fi

  if [[ -z "$why" ]]; then
    printf "%s\n" "ERROR: Explain why the license is safe."
    return 1
  fi

  license_finder whitelist add "$license" --who "$(git config user.name)" --why "$why"
}

# Label: License Finder (add)
# Description: Adds library to global list.
# Parameters: $1 (required) - Library, $2 (required) - Why.
licensea() {
  local library="$1"
  local why="$2"

  if [[ -z "$library" ]]; then
    printf "%s\n" "ERROR: Must supply library."
    return 1
  fi

  if [[ -z "$why" ]]; then
    printf "%s\n" "ERROR: Explain why the license is safe."
    return 1
  fi

  license_finder approval add "$library" --who "$(git config user.name)" --why "$why"
}

#-----------------------------------------#
# Section: [OpenSSL](https://openssl.org) #
#-----------------------------------------#

# Label: SSL Certificate Creation
# Description: Create SSL certificate.
# Parameters: $1 (required) - The domain name.
sslc() {
  local name="$1"

  if [[ -z "$name" ]]; then
    printf "ERROR: Domain name for SSL certificate must be supplied.\n"
    return 1
  fi

cat > "$name.cnf" <<-EOF
  [req]
  distinguished_name = req_distinguished_name
  x509_extensions = v3_req
  prompt = no
  [req_distinguished_name]
  CN = *."$name"
  [v3_req]
  keyUsage = keyEncipherment, dataEncipherment
  extendedKeyUsage = serverAuth
  subjectAltName = @alt_names
  [alt_names]
  DNS.1 = *."$name"
  DNS.2 = "$name"
EOF

  openssl req \
    -new \
    -newkey rsa:2048 \
    -sha256 \
    -days 3650 \
    -nodes \
    -x509 \
    -keyout "$name.key" \
    -out "$name.crt" \
    -config "$name.cnf"

  rm -f "$name.cnf"
}

#--------------------------------------#
# Section: [curl](http://curl.haxx.se) #
#--------------------------------------#

# Label: Curl Inspect
# Description: Inspect remote file with default editor.
# Parameters: $1 (required) - The URL.
curli() {
  if [[ "$1" ]]; then
    local file=$(mktemp -t suspicious_curl_file) || { printf "ERROR: Unable to create temporary file.\n"; return; }
    curl --location --fail --silent --show-error "$1" > $file || { printf "Failed to curl file.\n"; return; }
    $EDITOR --wait $file || { printf "Unable to open temporary curl file.\n"; return; }
    rm -f $file;
  else
    printf "ERROR: URL must be supplied.\n"
    return 1
  fi
}

#--------------------------------------------------#
# Section: [lsof](http://people.freebsd.org/~abe/) #
#--------------------------------------------------#

# Label: Port
# Description: List file activity on given port.
# Parameters: $1 (required) - The port number.
port() {
  if [[ "$1" ]]; then
    sudo lsof -i :$1
  else
    printf "ERROR: Port number must be supplied.\n"
  fi
}

#------------------------------------#
# Section: [Git](http://git-scm.com) #
#------------------------------------#

# Label: Git Init (all)
# Description: Initialize/re-initialize repositories in current directory.
gia() {
  while read -r project; do
    (
      cd "$project"
      if [[ -d ".git" ]]; then
        printf "\033[36m${project:2}\033[m: " # Print project (cyan) and message (white).
        git init
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Root
# Description: Change to repository root directory regardless of current depth.
groot() {
  cd "$(git rev-parse --show-toplevel)"
}

# Label: Git Info
# Description: Print repository overview information.
ginfo() {
  printf "$(_print_black_on_white ' Local Configuration (.git/config) ')\n\n"
  git config --local --list

  printf "\n$(_print_black_on_white ' Stashes ')\n\n"
  local stashes="$(gashl)"
  if [[ -n "$stashes" ]]; then
    printf "$stashes"
  else
    printf "None.\n"
  fi

  printf "\n$(_print_black_on_white ' Branches ')\n\n"
  gbl

  printf "\n$(_print_black_on_white ' Remote URLs ')\n\n"
  git remote --verbose

  printf "\n$(_print_black_on_white ' File Churn (Top 25) ')\n\n"
  ghurn | head -n 25

  printf "\n$(_print_black_on_white ' Commits by Author ')\n\n"
  guthors

  printf "\n$(_print_black_on_white ' Total Commits ')\n\n"
  gount

  printf "\n$(_print_black_on_white ' Last Tag ')\n\n"
  _git_last_tag_info

  printf "\n$(_print_black_on_white ' Last Commit ')\n\n"
  git show --decorate --stat

  printf "\n$(_print_black_on_white ' Current Status ')\n\n"
  git status --short --branch
}

# Label: Git Statistics
# Description: Answer statistics for current project.
gstats() {
  if [[ -d ".git" ]]; then
    gount
    printf "Branches: %s\n" "$(_git_branch_list | wc -l | tr -d ' ')"
    printf "Tags: %s\n" "$(git tag | wc -l | tr -d ' ')"
    printf "Stashes: %s\n" "$(_git_stash_count)"
    printf "Size: %s\n" "$(git count-objects --human-readable)"
  fi
}

# Label: Git Statistics (all)
# Description: Answer statistics for all projects in current directory.
gstatsa() {
  while read -r project; do
    (
      cd "$project"
      printf "\033[36m${project:2}\033[m:\n" # Print project (cyan) and message (white).
      gstats
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Churn
# Description: Answer commit churn for project files (sorted highest to lowest).
ghurn() {
  git log --all --find-renames --find-copies --name-only --format='format:' "$@" | \
    sort | \
    grep --invert-match '^$' | \
    uniq -c | \
    sort | \
    awk '{print $1 "\t" $2}' | \
    sort --general-numeric-sort --reverse | \
    more
}

# Label: Git Commit Count
# Description: Answer total number of commits for current project.
gount() {
  printf "Commits: "
  git rev-list --count HEAD
}

# Label: Git Log (interactive)
# Description: List feature branch commits with support to show/diff individual commits.
gli() {
  local commits=($(_git_feature_branch_shas))
  _git_commit_options "${commits[*]}"

  read -p "Enter selection: " response
  if [[ "$response" == 'q' ]]; then
    return
  fi

  printf "\n"
  local selected_commit=${commits[$((response - 1))]}
  _git_show_details $selected_commit

  printf "\n"
  read -p "View diff (y = yes, n = no)? " response
  if [[ "$response" == 'y' ]]; then
    gdt $selected_commit^!
  fi
}

# Label: Git Log Details
# Description: Dynamically list commit details for current feature branch or entire master branch.
gld() {
  if [[ _git_branch_name != "master" ]]; then
    commits=($(_git_feature_branch_shas))

    if [[ ${#commits[@]} == 1 ]]; then
      _git_show_details "${commits[0]}"
    elif [[ ${#commits[@]} > 1 ]]; then
      range="${commits[-1]}^..${commits[0]}"
      git log --stat --pretty=format:"$(_git_log_details_format)" $range
    fi
  fi
}

# Label: Git Show
# Description: Show commit details with optional diff support.
# Parameters: $1 (optional) - The commit to show. Default: <last commit>, $2 (optional) - Launch difftool. Default: false.
ghow() {
  local commit="$1"
  local difftool="$2"

  if [[ -n "$commit" && -n "$difftool" ]]; then
    _git_show_details "$commit"
    git difftool "$commit^" "$commit"
  elif [[ -n "$commit" && -z "$difftool" ]]; then
    _git_show_details "$commit"
  else
    _git_show_details
  fi
}

# Label: Git File
# Description: Show file details for a specific commit (with optional diff support).
# Parameters: $1 (required) - The file, $2 (required) - The commit, $3 (optional) - Launch difftool. Default: false.
gile() {
  local file="$1"
  local commit="$2"
  local diff="$3"

  if [[ -z "$file" ]]; then
    printf "ERROR: File is missing.\n"
    return 1
  fi

  if [[ -z "$commit" ]]; then
    printf "ERROR: Commit SHA is missing.\n"
    return 1
  fi

  git show --stat --pretty=format:"$(_git_log_details_format)" "$commit" -- "$file"

  if [[ -n "$diff" ]]; then
    gdt $commit^! -- "$file"
  fi
}

# Label: Git File History
# Description: View file commit history (with optional diff support).
# Parameters: $1 (required) - The file path.
gistory() {
  if [[ -z "$1" ]]; then
    printf "ERROR: File must be supplied.\n"
    return 1
  fi

  local file="$1"
  local commits=($(git rev-list --reverse HEAD -- "$file"))

  _git_file_commits commits[@] "$file"
}

# Label: Git Blame History
# Description: View file commit history for a specific file and/or lines (with optional diff support).
# Parameters: $1 (required) - The file path, $2 (optional) - The file lines (<start>,<end>).
glameh() {
  if [[ -z "$1" ]]; then
    printf "ERROR: File must be supplied.\n"
    return 1
  fi

  local file="$1"
  local lines="$2"
  local commits=($(git blame -s -M -C -C -L "$lines" "$file" | awk '{print $1}' | sort -u))

  _git_file_commits commits[@] "$file"
}

# Label: Git Authors (all)
# Description: Answer author commit activity per project (ranked highest to lowest).
guthorsa() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        # Print project (cyan) and message (white).
        printf "\033[36m${project:2}\033[m:\n"
        guthors
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Status (all)
# Description: Answer status of projects with uncommited/unpushed changes.
gsta() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        # Capture current project status info as an array.
        local results=($(git status --short --branch))
        local size=${#results[@]}

        # Print Git activity if Git activity detected (white).
        if [[ $size -gt 2 ]]; then
          # Remove first and second elements since they contain branch info.
          results=("${results[@]:1}")
          results=("${results[@]:1}")

          # Print project (cyan).
          printf "\033[36m${project:2}\033[m:\n"

          # Print results (white).
          for line in "${results[@]}"; do
            printf "%s" "$line "
            if [[ $newline == 1 ]]; then
              printf "\n"
              local newline=0
            else
              local newline=1
            fi
          done
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Update
# Description: Fetch commits, prune untracked references, review each commit (optional, with diff), and pull (optional).
gup() {
  git fetch --quiet
  commits=($(git log --reverse --no-merges --pretty=format:"%h" ..@{upstream}))

  if [[ ${#commits[@]} == 0 ]]; then
    printf "All is quiet, nothing to update.\n"
    return 0
  fi

  printf "Commit Summary:\n"
  hr '-'
  git log --reverse --no-merges --pretty=format:"$(_git_log_line_format)" ..@{upstream}
  hr '-'

  printf "Commit Review (↓${#commits[@]}):\n"

  local counter=1
  for commit in "${commits[@]}"; do
    hr '-'
    printf "[$counter/${#commits[@]}] "
    counter=$((counter + 1))

    _git_show_details $commit

    printf "\n"
    read -p "View Diff (y = yes, n = no, q = quit)? " response

    case $response in
      'y')
        git difftool $commit^!;;
      'n');;
      'q');;
      *)
        printf "ERROR: Invalid option.\n";;
    esac

    break
  done

  hr '-'
  read -p "Commit Pull (y/n)? " response

  if [[ "$response" == 'y' ]]; then
    git pull
  fi
}

# Label: Git Sync
# Description: Syncs up remote changes and deletes pruned/merged branches.
# Parameters
gync() {
  if [[ $(_git_branch_name) != "master" ]]; then
    printf "ERROR: Whoa, switch to master branch first.\n"
    return 1
  fi

  git pull && gbdm
}

# Label: Git Set Config Value (all)
# Description: Set key value for projects in current directory.
# Parameters: $1 (required) - The key name, $2 (required) - The key value.
gseta() {
  if [[ "$1" && "$2" ]]; then
    while read -r project; do
      (
        cd "$project"

        if [[ -d ".git" ]]; then
          # Set key value for current project.
          git config "$1" "$2"

          # Print project (cyan) and email (white).
          printf "\033[36m${project:2}\033[m: $1 = $2\n"
        fi
      )
    done < <(find . -type d -depth 1)
  else
    printf "ERROR: Key and value must be supplied.\n"
    return 1
  fi
}

# Label: Git Get Config Value (all)
# Description: Answer key value for projects in current directory.
# Parameters: $1 (required) - The key name.
ggeta() {
  if [[ "$1" ]]; then
    while read -r project; do
      (
        cd "$project"

        if [[ -d ".git" ]]; then
          # Get Git config value for given key.
          local result=$(git config "$1")

          # Print project (cyan).
          printf "\033[36m${project:2}\033[m: "

          # Print result.
          if [[ -n "$result" ]]; then
            printf "$1 = $result\n" # White
          else
            printf "\033[31mKey not found.\033[m\n" # Red
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    printf "ERROR: Key must be supplied.\n"
    return 1
  fi
}

# Label: Git Unset (all)
# Description: Unset key value for projects in current directory.
# Parameters: $1 (required) - The key name.
gunseta() {
  if [[ "$1" ]]; then
    while read -r project; do
      (
        cd "$project"

        if [[ -d ".git" ]]; then
          # Unset key for current project with error output suppressed.
          git config --unset "$1" &> /dev/null

          # Print project (cyan).
          printf "\033[36m${project:2}\033[m: \"$1\" key removed.\n"
        fi
      )
    done < <(find . -type d -depth 1)
  else
    printf "ERROR: Key must be supplied.\n"
    return 1
  fi
}

# Label: Git Email Set (all)
# Description: Sets user email for projects in current directory.
# Parameters: $1 (required) - The email address.
gailsa() {
  gseta "user.email" "$1"
}

# Label: Git Email Get
# Description: Answer user email for current project.
gail() {
  if [[ -d ".git" ]]; then
    git config user.email
  fi
}

# Label: Git Email Get (all)
# Description: Answer user email for projects in current directory.
gaila() {
  ggeta "user.email"
}

# Label: Git Since
# Description: Answer summarized list of activity since date/time for projects in current directory.
# Parameters: $1 (required) - The date/time since value, $2 (optional) - The date/time until value, $3 (optional) - The commit author.
gince() {
  if [[ "$1" ]]; then
    while read -r project; do
      (
        cd "$project"

        if [[ -d ".git" ]]; then
          # Capture git log activity.
          local results=$(git log --oneline --color --format="$(_git_log_line_format)" --since "$1" --until "$2" --author "$3" --reverse)
          # Print project name (cyan) and Git activity (white) only if Git activity was detected.
          if [[ -n "$results" ]]; then
            printf "\033[36m${project:2}:\033[m\n$results\n"
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    printf "ERROR: Date/time must be supplied.\n"
    return 1
  fi
}

# Label: Git Day
# Description: Answer summarized list of current day activity for projects in current directory.
gday() {
  gince "12am"
}

# Label: Git Week
# Description: Answer summarized list of current week activity for projects in current directory.
gweek() {
  gince "last Monday 12am"
}

# Label: Git Month
# Description: Answer summarized list of current month activity for projects in current directory.
gmonth() {
  gince "1 month 12am"
}

# Label: Git Standup
# Description: Answer summarized list of activity since yesterday for projects in current directory.
gsup() {
  gince "yesterday.midnight" "midnight" $(git config user.name)
}

# Label: Git Tail
# Description: Answer commit history since last tag for current project (copies results to clipboard).
gtail() {
  if [[ ! -d ".git" ]]; then
    printf "ERROR: Not a Git repository.\n"
    return 1
  fi

  if [[ $(_git_commits_since_last_tag) ]]; then
    _git_commits_since_last_tag | _copy_and_print "\n"
  else
    printf "No commits since last tag.\n"
  fi
}

# Label: Git Tail (all)
# Description: Answer commit history count since last tag for projects in current directory.
gtaila() {
  # Iterate through root project directories.
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        local info=$(_git_commit_count_since_last_tag "$project")
        if [[ ! "$info" == *": 0"* ]]; then
          printf "$info\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Stash
# Description: Creates stash.
# Parameters: $1 (optional) - Label. Default: "Last Actions (YYYY-MM-DD HH:MM:SS AM|PM Z)."
gash() {
  local label=${1:-"Last Actions ($(date '+%Y-%m-%d %r %Z'))."}
  git stash push --include-untracked --message "$label"
}

# Label: Git Stash List
# Description: List stashes.
gashl() {
  git stash list --pretty=format:'%C(magenta)%gd%C(reset) %C(yellow)%h%C(reset) %s %C(green)(%cr)%C(reset)'
}

# Label: Git Stash Show
# Description: Show stash or prompt for stash to show.
# Parameters: $1 (optional) - Show git diff. Default: skipped.
gashs() {
  local stash=($(git stash list))
  local diff_option="$1"

  if [[ -n "$diff_option" ]]; then
    case "$diff_option" in
      'd')
        _process_git_stash "git stash show --patch" "Git Stash Diff Options (select stash to diff)";;
      't')
        _process_git_stash "git difftool" "Git Stash Diff Options (select stash to diff)";;
      *)
        printf "Usage: gashs OPTION\n\n"
        printf "Available options:\n"
        printf "  d: Git diff.\n"
        printf "  t: Git difftool.\n"
        return;;
    esac
  else
    _process_git_stash "_git_show_details" "Git Stash Show Options (select stash to show)"
  fi
}

# Label: Git Stash Pop
# Description: Pop stash or prompt for stash to pop.
gashp() {
  _process_git_stash "git stash pop" "Git Stash Pop Options (select stash to pop)"
}

# Label: Git Stash Drop
# Description: Drop stash or prompt for stash to drop.
gashd() {
  _process_git_stash "git stash drop" "Git Stash Drop Options (select stash to drop)"
}

# Label: Git Stash (all)
# Description: Answer stash count for projects in current directory.
gasha() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        local count=$(_git_stash_count)

        if [[ -n $count && $count != 0 ]]; then
          printf "\033[36m${project:2}\033[m: $count\n" # Outputs in cyan color.
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Upstream Commit Count (all)
# Description: Answer upstream commit count since last pull for projects in current directory.
gucca() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        # Capture upstream project commit count.
        git fetch --quiet
        local count=$(git log ..@{upstream} --pretty=format:"%h" | wc -l | tr -d ' ')

        if [[ $count -gt '0' ]]; then
          # Print project (cyan) and commit count (white).
          printf "\033[36m${project:2}\033[m: $count\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Pull (all)
# Description: Pull new changes from remote branch for projects in current directory.
gpua() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        # Capture current project status.
        local results=$(git pull | tail -1)

        # Print project name and Git activity only if Git activity was detected.
        printf "\033[36m${project:2}\033[m: " # Outputs in cyan color.

        if [[ -n "$results" && "$results" != "Already up-to-date." ]]; then
          printf "\n  $results\n"
        else
          printf "✓\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Add (all)
# Description: Apply file changes (including new files) for projects in current directory.
galla() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        # Apply all changes to Git.
        local results=$(git add --verbose --all .)

        # Print project name (cyan) and Git activity (white) only if Git activity was detected.
        if [[ -n "$results" ]]; then
          printf "\033[36m${project:2}\033[m:\n$results\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Commit Fix (interactive)
# Description: Select which commit to fix within current feature branch.
gcfi() {
  local commits=($(_git_feature_branch_shas))

  _git_commit_options "${commits[*]}" "Select commit to fix"

  read -p "Enter selection: " response
  if [[ "$response" == 'q' ]]; then
    return
  fi

  printf "\n"
  local selected_commit=${commits[$((response - 1))]}
  gcf "$selected_commit"
}

# Label: Git Commit Fix (file)
# Description: Create commit fix for file (ignores previous fixups).
# Parameters: $1 (required) - The file to create fixup commit for.
gcff() {
  local file_path="$1"
  local file_sha="$(git log --grep 'fixup!' --invert-grep --pretty=format:%h -1 $file_path)"

  if [[ "($(_git_feature_branch_shas))" == *"$file_sha"* ]]; then
    git add "$file_path" && git commit --fixup "$file_sha"
  fi
}

# Label: Git Commit Fix and Push
# Description: Create fixup commit, push, and copy URL to clipboard.
# Parameters: $1 (required) - The commit SHA to be fixed, $2 (optional) - Use "-a" to amend the fixup message.
gcfp() {
  local sha="$1"
  local option="$2"

  if git diff --cached --quiet; then
    printf "ERROR: No staged changes detected.\n"
    return 1
  fi

  if [[ -z "$sha" ]]; then
    printf "ERROR: Fixup commit SHA is required.\n"
    return 1
  fi

  git commit --fixup "$sha"

  if [[ "$option" == "-a" ]]; then
    git commit --amend
  fi

  git push
  gh u $(_git_commit_last)
}

# Label: Git Commit (all)
# Description: Commit changes (unstaged and staged) for projects in current directory.
gcaa() {
  local temp_file=$(mktemp -t git-commit)
  cp $HOME/.config/git/commit_message.txt $temp_file
  $EDITOR --wait $temp_file

  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        # Only process projects that have changes.
        if [[ "$(git status --short)" ]]; then
          printf "\033[36m${project:2}\033[m:\n" # Outputs in cyan color.
          git commit --all --cleanup strip --file $temp_file
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  rm -f $temp_file
}

# Label: Git Commit and Push (all)
# Description: Commit and push changes for projects in current directory.
gcap() {
  local temp_file=$(mktemp -t git-commit)
  cp $HOME/.config/git/commit_message.txt $temp_file
  $EDITOR --wait $temp_file

  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        # Only process projects that have changes.
        if [[ "$(git status --short)" ]]; then
          printf "\033[36m${project:2}\033[m:\n" # Outputs in cyan color.
          git commit --all --cleanup strip --file $temp_file && git push
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  rm -f $temp_file
}

# Label: Git Push Origin Branch
# Description: Pushes current branch to origin and sets upstream tracking.
gpob() {
  git push --set-upstream origin $(_git_branch_name)
}

# Label: Git Push (all)
# Description: Push changes for projects in current directory.
gpa() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        # Only process projects that have changes.
        if [[ "$(git status --short --branch)" == *"[ahead"*"]" ]]; then
          printf "\033[36m${project:2}\033[m:\n" # Outputs in cyan color.
          git push
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Rebase (interactive)
# Description: Rebase commits, interactively.
# Parameters: $1 (optional) - The number of commits or label (i.e. branch/tag) to rebase to.
gri() {
  local number_pattern="^[0-9]+$"
  local label_pattern="^[0-9a-zA-Z\_-]+$"
  local parent_sha=$(git log --pretty=format:%h -n 1 "$(_git_feature_branch_first_sha)^" 2> /dev/null || :)
  local value="${1:-$parent_sha}"

  if [[ -z $value ]]; then
    return 0
  fi

  if [[ "$value" =~ $number_pattern ]]; then
    git rebase --interactive "@~${value}"
  elif [[ "$value" =~ $label_pattern ]]; then
    git rebase --interactive "$value"
  else
    printf "%s\n" "Invalid Git commit SHA or label: $value."
    return 1
  fi
}

# Label: Git Rebase (automatic)
# Description: Rebase commits, automatically. Identical to `gri` function but skips editor.
# Parameters: $1 (optional) - The commit number or branch to rebase to. Default: upstream or root.
gra() {
  EDITOR=true gri "$1"
}

# Label: Git Branch List
# Description: List local and remote branch details.
gbl() {
  local format="%(refname)|%(color:yellow)%(objectname)|%(color:reset)|%(color:blue bold)%(authorname)|%(color:green)|%(committerdate:relative)"
  _git_branch_list "$format" | column -s'|' -t
}

# Label: Git Branch List (all)
# Description: List current branch for projects in current directory.
gbla() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        local branch="$(_git_branch_name)"
        printf "\033[36m${project:2}\033[m: " # Output in cyan color.

        if [[ "$branch" == "master" ]]; then
          printf "$branch\n"
        else
          printf "\033[31m$branch\033[m\n" # Output in red color.
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Branch Create
# Description: Create and switch to branch.
# Parameters: $1 (required) - The branch name.
gbc() {
  local name="$1"

  if [[ "$name" ]]; then
    git checkout -b "$name" --track
    printf "%s" "$name" | _copy_and_print
  else
    printf "ERROR: Branch name must be supplied.\n"
    return 1
  fi
}

# Label: Git Branch Switch
# Description: Switch between branches.
gbs() {
  if [[ -d ".git" ]]; then
    local branches=()
    local ifs_original=$IFS
    IFS=$'\n'

    branches=($(_git_branch_list))

    if [[ ${#branches[@]} -gt 1 ]]; then
      printf "\nSelect branch to switch to:\n"

      for ((index = 0; index < ${#branches[*]}; index++)); do
        printf "  $index: ${branches[$index]}\n"
      done

      printf "  q: Quit/Exit.\n\n"

      read -p "Enter selection: " response
      printf "\n"

      local match="^([0-9]{1,2})$"
      if [[ "$response" =~ $match ]]; then
        local branch="$(printf "${branches[$response]}" | awk '{print $1}')"
        git checkout "$branch"
        printf "\n"
      fi
    else
      printf "Sorry, only one branch to switch to and you're on it!\n"
    fi
  else
    printf "Sorry, no branches to switch to.\n"
  fi

  IFS=$ifs_original
}

# Label: Git Branch Switch (all)
# Description: Switch to given branch for projects in current directory.
# Parameters: $1 (required) - The branch name.
gbsa() {
  local branch="$1"

  if [[ -n "$branch" ]]; then
    while read -r project; do
      (
        cd "$project"

        if [[ -d ".git" ]]; then
          local current_branch="$(_git_branch_name)"

          if [[ $(git rev-parse --quiet --verify "$branch") && "$current_branch" != "$branch" ]]; then
            git checkout --quiet "$branch"
            printf "\033[36m${project:2}\033[m: $branch\n" # Output in cyan and branch in white color.
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    printf "ERROR: Branch name must be supplied.\n"
  fi
}

# Label: Git Branch Number (all)
# Description: Answer number of branches for projects in current directory.
gbna() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        local current_branch="$(_git_branch_name)"
        local number="$(_git_branch_list | ag --invert-match master | wc -l | tr -d ' ')"

        if [[ $number -gt 0 ]]; then
          # Output project in cyan and number in white color.
          printf "\033[36m${project:2}\033[m: $number\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Branch Delete
# Description: Select local and/or remote branches to delete.
gbd() {
  # Only process projects that are Git-enabled.
  if [[ -d ".git" ]]; then
    local branches=()
    local ifs_original=$IFS
    IFS=$'\n'

    branches=($(_git_branch_list))

    if [[ ${#branches[@]} -gt 1 ]]; then
      printf "\nSelect branch to delete:\n"

      for ((index = 0; index < ${#branches[*]}; index++)); do
        printf "  $index: ${branches[$index]}\n"
      done

      printf "  q: Quit/Exit.\n\n"

      read -p "Enter selection: " response
      local branch="$(printf "${branches[$response]}" | awk '{print $1}')"
      printf "\n"

      local match="^([0-9]{1,2})$"
      if [[ "$response" =~ $match ]]; then
        _git_branch_delete_local "$branch"
        _git_branch_delete_remote "$branch"
      fi
    else
      printf "Sorry, only the master branch exists and it can't be deleted.\n"
    fi
  else
    printf "Sorry, no branches to delete.\n"
  fi

  IFS=$ifs_original
}

# Label: Git Branch Delete Merged
# Description: Delete remote and local merged branches.
gbdm() {
  if [[ $(_git_branch_name) != "master" ]]; then
    printf "ERROR: Whoa, switch to master branch first.\n"
    return 1
  fi

  # Remote
  git branch --remotes --merged | \
    ag "origin" | \
    ag --invert-match "master" | \
    sed 's/origin\///' | \
    xargs -n 1 git push --delete origin

  # Local
  git branch --merged | ag --invert-match "\* master" | xargs -n 1 git branch --delete --force
}

# Label: Git Tag Rebuild
# Description: Rebuild a previous tag. WARNING: Use with caution, especially if previously published.
# Parameters: $1 (required) - Version, $2 (required) - Release notes path, $3 (optional) - Creation date/time. Default: current date/time.
gtagr() {
  local version="$1"
  local path="$2"
  local datetime="${3:-$(date '+%Y-%m-%d %H:%M:%S')}"

  GIT_COMMITTER_DATE="$datetime" git tag --force --sign --file "$path" "$version"
}

# Label: Git Tag Delete
# Description: Delete local and remote tag (if found).
# Parameters: $1 (required) - The tag name.
gtagd() {
  if [[ -z "$1" ]]; then
    printf "ERROR: Tag name must be supplied.\n"
    return 1
  fi

  read -p "Delete '$1' tag from local and remote repositories. Continue (y/n)?: " response

  if [[ "$response" == 'y' ]]; then
    printf "Local: "
    if [[ -n "$(git tag --list $1)" ]]; then
      git tag --delete "$1"
    else
      printf "No tag found.\n"
    fi

    printf "Remote: "
    if [[ $(git config remote.origin.url) && -n "$(git ls-remote --tags origin | ag $1)" ]]; then
      git push --delete origin "$1"
    else
      printf "No tag found.\n"
    fi
  else
    printf "Tag deletion aborted.\n"
  fi
}

# Label: Git Worktree Add
# Description: Add and switch to new worktree.
# Parameters: $1 (required) - The worktree/branch name, $2 (optional) - Use "l" for "local" or "r" for "remote".
gwa() {
  local name="$1"
  local project_name="$(basename $(pwd))"
  local worktree_path="../$project_name-$name"
  local option="${2:-ignore}"

  if [[ -z "$name" ]]; then
    printf "ERROR: Git worktree name is missing.\n"
    return 1
  fi

  if [[ "$option" != "ignore" && -n $(git branch --list "$name") ]]; then
    printf "ERROR: Invalid Git worktree, local branch exists.\n"
    return 1
  fi

  case $option in
    'l')
      git worktree add -b "$name" "$worktree_path" master;;
    'r')
      git worktree add -b "$name" "$worktree_path" origin/"$name";;
    *)
      git worktree add --detach "$worktree_path" HEAD;;
  esac

  printf "Syncing project files...\n"
  git ls-files --others | rsync --compress --links --files-from - "$(pwd)/" "$worktree_path/"
  cd "$worktree_path"
}

# Label: Git Worktree Delete
# Description: Deletes current Git worktree.
gwd() {
  local project_name="$(basename $(git rev-parse --show-toplevel) | cut -d'-' -f1)"
  local worktree_dir="$(pwd)"

  if [[ "$(git status --short)" ]]; then
    printf "ERROR: Git worktree has uncommitted changes.\n"
    return 1
  else
    cd ../$project_name
    read -p "Git worktree: $worktree_dir. Delete (y/n)?: " response

    if [[ "$response" == 'y' ]]; then
      rm -rf $worktree_dir
      git worktree prune
    fi
  fi
}

# Label: Git Reset Soft
# Description: Resets previous commit (default), resets back to number of commits, or resets to specific commit.
# Parameters: $1 (optional) - The number of commits to reset or a specific commit SHA.
grs() {
  local value="$1"
  local number_pattern="^[0-9]+$"
  local commit_pattern="^[a-f0-9]+$"

  if [[ "$value" =~ $number_pattern ]]; then
    git reset --soft "HEAD~${value}"
  elif [[ "$value" =~ $commit_pattern ]]; then
    git reset --soft "${value}"
  else
    git reset --soft HEAD^
  fi
}

# Label: Git Reset Hard
# Description: Reset to HEAD, destroying all untracked, staged, and unstaged changes. UNRECOVERABLE!
# Parameters: $1 (optional) - The number of commits to reset or a specific commit SHA.
grh() {
  local value="$1"
  local number_pattern="^[0-9]+$"
  local commit_pattern="^[a-f0-9]+$"

  git clean --force --quiet -d

  if [[ "$value" =~ $number_pattern ]]; then
    git reset --hard "HEAD~${value}"
  elif [[ "$value" =~ $commit_pattern ]]; then
    git reset --hard "${value}"
  else
    git reset --hard HEAD
  fi
}

# Label: Git Reset Hard (all)
# Description: Destroy all untracked, staged, and unstaged changes for all projects in current directory. UNRECOVERABLE!
# Parameters: $1 (optional) - The number of commits to reset or a specific commit SHA.
grha() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        printf "\n\033[36m${project:2}\033[m:\n" # Outputs in cyan color.
        grh "$1"
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Nuke
# Description: Permanently destroy and erase a file from history. UNRECOVERABLE!
# Parameters: $1 (optional) - The file to destroy.
guke() {
  local file="$1"

  if [[ -z "$file" ]]; then
    printf "ERROR: File to nuke must be supplied.\n"
    return 1
  fi

  printf "\033[31m" # Switch to red font.
  read -p "Permanently delete '$file' from the local repository. Continue (y/n)?: " response
  printf "\033[m" # Switch to white font.

  if [[ "$response" == 'y' ]]; then
    git filter-branch --force --index-filter "git rm -r --cached '$file' --ignore-unmatch" --prune-empty --tag-name-filter cat -- --all
  else
    printf "Nuke aborted.\n"
  fi
}

# Label: Git Clean (all)
# Description: Clean uncommitted files from all projects in current directory.
gleana() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        # Only process projects that have untracked changes.
        if [[ "$(git status --untracked-files --short)" ]]; then
          printf "\n\033[36m${project:2}\033[m:\n" # Outputs in cyan color.
          git clean -d --force
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Clear
# Description: Clear repository for packaging/shipping purposes.
glear() {
  if [[ ! -d .git ]]; then
    printf "%s\n" "ERROR: Project is not a Git repository."
    return 1
  fi

  read -p "Permanently non-Git repository files? Continue (y/n)?: " response

  if [[ "$response" == "y" ]]; then
    gvac

    printf "\n%s\n\n" "Aggressively pruning repository..."
    git gc --aggressive --prune=now

    printf "\n%s\n" "Clearing reflog..."
    git reflog expire --expire=now --all

    printf "\n%s\n" "Deleting code coverage reports..."
    rm -rf coverage

    printf "\n%s\n" "Deleting Rubocop cache..."
    copd

    printf "\n%s\n" "Deleting Node modules..."
    rm -rf node_modules

    printf "\n%s\n" "Deleting Elm packages..."
    rm -rf elm-stuff

    printf "\n%s\n" "Deleting temp directory..."
    rm -rf tmp
  else
    printf "%s\n" "Git clear aborted."
  fi
}

# Label: Git Verify and Clean
# Description: Verify and clean objects for current project.
gvac() {
  printf "%s\n\n" "Verifying connectivity and validity of the objects in Git repository..."
  git fsck

  printf "\n%s\n\n" "Cleaning unnecessary files and optimizing local Git repository..."
  git gc

  printf "%s\n\n" "Pruning rerere records of older conflicting merges..."
  git rerere gc
}

# Label: Git Verify and Clean (all)
# Description: Verify and clean objects for projects in current directory.
gvaca() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        printf "\n\033[36m${project:2}\033[m:\n" # Outputs in cyan color.
        git fsck && git gc && git rerere gc
      fi
    )
  done < <(find . -type d -depth 1)
}

#---------------------------------------#
# Section: [GitHub](https://github.com) #
#---------------------------------------#

# Label: GitHub
# Description: View GitHub details for current project.
# Parameters: $1 (optional) - The option selection, $2 (optional) - The option input.
gh() {
  if [[ -d ".git" ]]; then
    while true; do
      if [[ $# == 0 ]]; then
        printf "\nUsage: gh OPTION\n"
        printf "\nGitHub Options (default browser):\n"
        printf "  o: Open repository.\n"
        printf "  i: Open repository issues.\n"
        printf "  c: Open repository commits. Options:\n"
        printf "     HASH: Open commit.\n"
        printf "  f: Copy repository file URL.\n"
        printf "  b: Open repository branches. Options:\n"
        printf "     c: Open current branch.\n"
        printf "     d: Open diff for current branch.\n"
        printf "     r: Open pull request for current branch.\n"
        printf "  t: Open repository tags.\n"
        printf "  r: Open repository pull requests.\n"
        printf "     NUMBER: Open pull request.\n"
        printf "     l: List pull requests.\n"
        printf "  w: Open repository wiki.\n"
        printf "  p: Open repository pulse.\n"
        printf "  g: Open repository graphs.\n"
        printf "  s: Open repository settings.\n"
        printf "  u: Print and copy repository URL. Options:\n"
        printf "     HASH: Print and copy commit URL.\n"
        printf "     l: Print and copy last commit URL.\n"
        printf "  q: Quit/Exit.\n\n"
        read -p "Enter selection: " response
        printf "\n"
        _process_gh_option $response "$2"
      else
        _process_gh_option "$1" "$2" "$3"
      fi
      break
    done
  else
    printf "ERROR: Not a Git repository!\n"
    return 1
  fi
}

# Label: GitHub Pull Request (all)
# Description: Open pull requests for all projects in current directory (non-master branches only).
ghpra() {
  while read -r project; do
    (
      cd "$project"

      if [[ -d ".git" ]]; then
        if [[ "$(_git_branch_name)" != "master" ]]; then
          gh b r # a.k.a. GitHub Branch Pull Request
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

#--------------------------------------------------#
# Section: [PostgreSQL](http://www.postgresql.org) #
#--------------------------------------------------#

# Label: PostgreSQL User Create
# Description: Create PostgreSQL user.
# Parameters: $1 (required) - The username.
pguc() {
  local user="$1"

  if [[ -n "$user" ]]; then
    createuser --interactive "$user" -P
  else
    printf "ERROR: PostgreSQL username must be supplied.\n"
    return 1
  fi
}

# Label: PostgreSQL User Drop
# Description: Drop PostgreSQL user.
# Parameters: $1 (required) - The username.
pgud() {
  local user="$1"

  if [[ -n "$user" ]]; then
    dropuser --interactive "$user"
  else
    printf "ERROR: PostgreSQL username must be supplied.\n"
    return 1
  fi
}

# Label: PostgreSQL Template
# Description: Edit PostgreSQL template.
# Parameters: $1 (required) - The username.
pgt() {
  local user="$1"

  if [[ -n "$user" ]]; then
    psql -U "$user" template1
  else
    printf "ERROR: PostgreSQL username must be supplied.\n"
    return 1
  fi
}

#--------------------------------------------#
# Section: [Ruby](https://www.ruby-lang.org) #
#--------------------------------------------#

# Label: Ruby Version (all)
# Description: Show current Ruby version for all projects in current directory.
rbva() {
  while read -r project; do
    (
      cd "$project"

      if [[ -e ".ruby-version" ]]; then
        local version=$(head -n 1 .ruby-version)

        # Outputs project as cyan and version as white color.
        printf "\033[36m${project:2}\033[m: $version\n"
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Ruby Upgrade (all)
# Description: Upgrade Ruby projects in current directory with new Ruby version.
# Parameters: $1 (required) - The new version to upgrade to. Example: 2.3.0.
rbua() {
  if [[ "$1" ]]; then
    while read -r project; do
      (
        cd "$project"

        if [[ -e ".ruby-version" ]]; then
          local old_version=$(head -n 1 .ruby-version)
          local new_version="$1"

          printf "\033[36m${project:2}\033[m: " # Outputs project in cyan color.

          if [[ "$old_version" != "$new_version" ]]; then
            printf "$new_version\n" > .ruby-version
            printf "$old_version --> $new_version\n"
          else
            printf "✓\n"
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    printf "ERROR: Version must be supplied.\n"
    return 1
  fi
}

# Label: Ruby Server
# Description: Serve web content from current directory via WEBrick.
# Parameters: $1 (optional) - The custom port. Default: 3030.
rbs() {
  local default_port=3030
  local custom_port=$1

  ruby -run -e httpd . --port ${custom_port:-$default_port}
}

#--------------------------------------------#
# Section: [Ruby Gems](https://rubygems.org) #
#--------------------------------------------#

# Label: Gem Dependency Search
# Description: Finds a gem defined within a Gemfile or a gemspec.
# Parameters: $1 (required) - The gem name.
gemdep() {
  local gem_name="$1"

  if [[ -z "$gem_name" ]]; then
    printf "ERROR: Gem name must be supplied!\n"
    return 1
  fi

  ag "(add.*dependency \"$gem_name\"|add.*dependency '$gem_name'|gem \"$gem_name\"|gem '$gem_name')" .
}

#---------------------------------------#
# Section: [Bundler](http://bundler.io) #
#---------------------------------------#

# Label: Bundler Jobs
# Description: Answer maximum Bundler job limit for current machine or automatically set it.
bj() {
  if command -v sysctl > /dev/null; then
    local computer_name=$(scutil --get ComputerName)
    local max_jobs=$((`sysctl -n hw.ncpu` - 1))
    local bundler_config="$HOME/.bundle/config"

    printf "$computer_name's maximum Bundler job limit is: $max_jobs.\n"

    if command -v ag > /dev/null && [[ -e "$bundler_config" ]]; then
      local current_jobs=$(ag "JOBS" $bundler_config | awk '{print $2}' | tr -d "'")

      if [[ $current_jobs != $max_jobs ]]; then
        bundle config --global jobs $max_jobs
        printf "Automatically updated Bundler to use maximum job limit. Details: $bundler_config.\n"
      else
        printf "$computer_name is using maximum job limit. Kudos!\n"
      fi
    fi
  else
    printf "ERROR: Operating system must be OSX."
    return 1
  fi
}

# Label: Bundler Config Gem
# Description: Configure Bundler to use local gem for development purposes.
# Parameters: $1 (required) - Gem name, $2 (required) - Gem path.
bcg() {
  local gem_name=$1
  local gem_path=$2

  if [[ -z "$gem_name" ]]; then
    printf "ERROR: Gem name must be supplied!\n"
    return 1
  fi

  if [[ -z "$gem_path" ]]; then
    printf "ERROR: Gem path must be supplied!\n"
    return 1
  fi

  bundle config "local.$gem_name" "$gem_path"
  printf "%s\n" "Added: $(tail -n 1 $HOME/.bundle/config)"
}

# Label: Bundler Config Ignore Post-Install Message
# Description: Configure Bundler to ignore install messages for specified gem.
# Parameters: $1 (required) - The gem name.
bcim() {
  local gem_name=$1

  if [[ ! $gem_name ]]; then
    printf "ERROR: Gem name must be supplied!\n"
    return 1
  fi

  bundle config ignore_messages.$gem_name true

  printf "Bundler post-install messages are ignored for \"$gem_name\".\n"
}

# Label: Bundle Outdated (all)
# Description: Answer outdated gems for projects in current directory.
boa() {
  while read -r project; do
    (
      cd "$project"

      if [[ -f "Gemfile.lock" ]]; then
        printf "\033[36m${project:2}\033[m: " # Outputs project in cyan color.

        # Capture current project status: Search for bullets (*, outdated gems) or missing (not found) gems.
        local results=$(bundle outdated | ag --only-matching "(\*.+|.+not\sfind.+)")

        # Print project status if Bundler activity is detected, otherwise a checkmark for passing status.
        if [[ -n "$results" ]]; then
          printf "\n$results\n"
        else
          printf "✓\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Bundle Update (all)
# Description: Update gems for projects in current directory.
bua() {
  while read -r project; do
    (
      cd "$project"
      if [[ -f "Gemfile.lock" ]]; then
        rm -f Gemfile.lock
        bundle install --quiet

        # Print project status if Bundler activity is detected, otherwise a checkmark for passing status.
        printf "\033[36m${project:2}\033[m: " # Outputs project in cyan color.
        if [[ $(git diff | wc -l | tr -d ' ') -gt 0 ]]; then
          printf "↑\n"
        else
          printf "✓\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Bundle Clean (all)
# Description: Clean projects of gem artifacts (i.e. pkg folder).
bca() {
  while read -r project; do
    (
      cd "$project"
      if [[ -f "Gemfile.lock" ]]; then
        printf "\033[36m${project:2}\033[m: " # Outputs project in cyan color.

        # Print status if found, otherwise a checkmark for passing status.
        if [[ -d "pkg" ]]; then
          rm -rf pkg
          printf "Cleaned gem artifacts.\n"
        else
          printf "✓\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

#-----------------------------------------------#
# Section: [Rake](https://github.com/ruby/rake) #
#-----------------------------------------------#

# Label: Bundle Execute Rake
# Description: Run Rake via binstub or Bundler.
ber() {
  if [[ -e bin/rake ]]; then
    bin/rake $@
  else
    bundle exec rake $@
  fi
}

# Label: Bundle Execute Rake (all)
# Description: Run default Rake tasks via binstub or Bundler for projects in current directory.
bera() {
  while read -r project; do
    (
      cd "$project"
      if [[ -f "Gemfile.lock" && -f "Rakefile" ]]; then
        # Prints project (cyan).
        printf "\033[36m${project:2}\033[m: "

        SUPPRESS_STDOUT=enabled SUPPRESS_STDERR=enabled ber > /dev/null
        printf "\n"
      fi
    )
  done < <(find . -type d -depth 1)
}

#--------------------------------------------------------------------#
# Section: [Code Quality](https://github.com/bkuhlmann/code_quality) #
#--------------------------------------------------------------------#

# Label: Code Quality (all)
# Description: Run code quality tasks via binstub or Bundler for projects in current directory.
cqa() {
  while read -r project; do
    (
      cd "$project"
      if [[ -f "Gemfile.lock" && -f "Rakefile" ]]; then
        # Prints project (cyan).
        printf "\033[36m${project:2}\033[m:\n"

        ber code_quality
        printf "\n"
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Code Quality Issues
# Description: List all source files affected by code quality issues.
cqi() {
  local comments=("TODO" "FIX" "DUPLICATE" "shellcheck disable" ":reek:" "rubocop:disable")

  for comment in ${comments[*]}; do
    ag --nomultiline --depth -1 --case-sensitive --ignore "vendor" "^\s*?(#|--|//) $comment" .
  done
}

#-------------------------------------#
# Section: [RSpec](http://rspec.info) #
#-------------------------------------#

# Label: Bundle Execute RSpec
# Description: Run RSpec via binstub or Bundler.
bes() {
  if [[ -e bin/rspec ]]; then
    bin/rspec $@
  else
    bundle exec rspec $@
  fi
}

# Label: Bundle Exec RSpec Bisect
# Description: Debug RSpec failure using bisect to automatically determine where failure is occuring.
# Parameters: $1 (optional) - The seed. Default: 2112, $2 (optional) - Debug verbosity. Default: "normal".
besb() {
  local seed=${1:-2112}
  local verbosity="${2:-normal}"

  bes --seed $seed --bisect="$verbosity" spec
}

# Label: Bundle Exec RSpec Debug
# Description: Debug intermittent RSpec failure(s) by running spec(s) until failure is detected.
# Parameters: $1 (optional) - The spec to debug. Default: "spec".
besd() {
  local subject=${1:-spec}

  while [ $? == 0 ]; do
    bes "$subject"
  done
}

# Label: Bundle Exec RSpec Profile
# Description: Runs RSpec specs with profiling enabled.
# Parameters: $1 (optional) - The number of top specs to profile. Default: 5.
besp() {
  local number=${1:-5}
  bes --profile $number spec
}

# Label: Bundle Execute RSpec (all)
# Description: Run RSpec via binstub or Bundler for projects in current directory.
bessa() {
  while read -r project; do
    (
      cd "$project"

      if [[ -f "Gemfile.lock" && -d "spec" ]]; then
        local json=$(SUPPRESS_STDOUT=enabled SUPPRESS_STDERR=enabled bess --format json)
        local examples=$(printf "%s" "$json" | jq ".summary.example_count" )
        local failures=$(printf "%s" "$json" | jq ".summary.failure_count" )
        local pending=$(printf "%s" "$json" | jq ".summary.pending_count" )
        local duration=$(printf "%s" "$json" | jq ".summary.duration" )

        # Prints project (cyan).
        printf "\033[36m${project:2}\033[m: "

        # Prints total examples (white).
        printf "$examples examples, "

        # Prints total failures (red).
        _toggle_total_color "$failures" "failures" "\033[31m"
        printf ", "

        # Prints total pending (yellow).
        _toggle_total_color "$pending" "pending" "\033[33m"
        printf ", "

        # Prints total duration (white).
        printf "$duration seconds.\n"
      fi
    )
  done < <(find . -type d -depth 1)
}

#--------------------------------------------------#
# Section: [Guard](https://github.com/guard/guard) #
#--------------------------------------------------#

# Label: Bundle Execute Guard
# Description: Run Guard via binstub or Bundler.
beg() {
  if [[ -e bin/guard ]]; then
    bin/guard $@
  else
    bundle exec guard $@
  fi
}

#--------------------------------------------------#
# Section: [Ruby on Rails](http://rubyonrails.org) #
#--------------------------------------------------#

# Label: Ruby on Rails New
# Description: Create new Rails application from selected template.
# Parameters: $1 (required) - Application name, $2 (optional) - Template name, $3 (optional) - Branch name.
railsn() {
  if [[ "$1" ]]; then
    while true; do
      if [[ $2 ]]; then
        _process_rails_new_option "$1" "$2" "$3"
      else
        printf "\nUsage: railsn NAME TEMPLATE\n"
        printf "\nAvailable Ruby on Rails Templates:\n\n"
        printf "  default: Rails Default Template\n"
        printf "   custom: Rails Custom Template\n"
        printf "     slim: Rails Slim Template\n"
        printf "    setup: Rails Setup Template\n"
        printf "    dummy: Rails Dummy Template\n"
        printf "\n"
        read -p "Please pick one (or type 'q' to quit): " response
        printf "\n"
        _process_rails_new_option "$1" $response "$3"
      fi
      break
    done
  else
    printf "ERROR: Rails application name must be supplied.\n"
    return 1
  fi
}

#------------------------------------------------------------#
# Section: [RailRoady](https://github.com/preston/railroady) #
#------------------------------------------------------------#

# Label: RailRoady Models
# Description: Generate diagrams for Rails models, controllers, or states.
# Parameters: $1 (required) - The kind of diagram to generate.
rr() {
  local kind="$1"
  local doc_dir="tmp/doc"

  case $kind in
    'm')
      railroady --label --inheritance --show-belongs_to --all-columns --transitive --output "$doc_dir/models.dot" --models
      printf "$(pwd)/$doc_dir/models.dot" | _copy_and_print;;
    'c')
      railroady --label --inheritance --output "$doc_dir/controllers.dot" --controllers
      printf "$(pwd)/$doc_dir/controllers.dot" | _copy_and_print;;
    's')
      railroady --label --inheritance --output "$doc_dir/state.dot" --aasm
      printf "$(pwd)/$doc_dir/state.dot" | _copy_and_print;;
    *)
      printf "\nUsage: rr KIND\n\n"
      printf "RailRoady Options:\n"
      printf "  m: Generate Rails Entity Relationship Diagram (ERD).\n"
      printf "  c: Generate Rails controller hierarchy diagram.\n"
      printf "  s: Generate Rails state machine transitions.\n\n";;
  esac
}

#-------------------------------------#
# Section: [Elm](http://elm-lang.org) #
#-------------------------------------#

# Label: Elm Make
# Description: Compile Elm source.
# Parameters: $1 (required) - The source path, $2 (required) - The output path.
elmm() {
  local source_path="$1"
  local output_path="$2"

  if [[ -z "$source_path" || -z "$output_path" ]]; then
    printf "%s\n" "ERROR: Source and output path must be provided."
    return 1
  fi

  elm make "$source_path" --warn --output="$output_path"
}

# Label: Elm Live Reload
# Description: Watch for source code changes and recompile immediately.
# Parameters: $1 (required) - The source path, $2 (optional) - The output path.
elml() {
  local source_path="$1"
  local output_path="${2:-/dev/null}"

  if [[ -z "$source_path" || -z "$output_path" ]]; then
    printf "%s\n" "ERROR: Source and output path must be provided."
    return 1
  fi

  elm live "$source_path" --warn --debug --output="$output_path"
}

#---------------------------------------------#
# Section: [asciinema](https://asciinema.org) #
#---------------------------------------------#

# Label: asciinema Record
# Description: Create new asciinema recording.
# Parameters: $1 (required) - The recording label.
cinr() {
  local label="$1"
  local name="${label,,}.cast"

  if [[ -z "$label" ]]; then
    printf "ERROR: Recording label is missing.\n"
    return 1
  fi

  asciinema rec --idle-time-limit 1 --title "$label" "$name"
}

#-----------------------------------------------------------#
# Section: [Overmind](https://github.com/DarthSim/overmind) #
#-----------------------------------------------------------#

# Label: Overmind Start
# Description: Start processes.
# Parameters: $1 (optional) - Processes. Default: "web,worker", $2 (optional) - Port. Default: 2990.
oms() {
  local processes="${1:-web,worker}"
  local port=${2:-2990}

  overmind start --processes "$processes" --port $port --port-step 10
}

# Label: Overmind Connect
# Description: Connect to running process.
# Parameters: $1 (optional) - Process. Default: "web".
omc() {
  local process="${1:-web}"
  overmind connect "$process"
}

# Label: Overmind Restart
# Description: Restart running process.
# Parameters: $1 (optional) - Process. Default: "web".
omr() {
  local process="${1:-web}"
  overmind restart "$process"
}

#-------------------#
# Section: Dotfiles #
#-------------------#

# Label: Dotfiles
# Description: Learn about dotfile aliases, functions, etc.
# Parameters: $1 (optional) - The option selection, $2 (optional) - The option input.
dots() {
  while true; do
    if [[ $# == 0 ]]; then
      printf "\nUsage: dots OPTION\n"
      printf "\nDotfile Options:\n"
      printf "  a: Print aliases.\n"
      printf "  f: Print functions.\n"
      printf "  g: Print Git hooks.\n"
      printf "  p: Print all.\n"
      printf "  s: Search for alias/function.\n"
      printf "  q: Quit/Exit.\n\n"
      read -r -p "Enter selection: " response
      printf "\n"
      _process_dots_option $response "$2"
    else
      _process_dots_option $1 "$2"
    fi
    break
  done
}